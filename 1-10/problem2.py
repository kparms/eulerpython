#Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
#By starting with 1 and 2, the first 10 terms will be:

#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
#find the sum of the even-valued terms.
import math

#the slow way
def fib(n):
	if n==1:
		print('add')
		return 1
	elif n==0:
		return 0
	else:
		return fib(n-1) + fib(n-2)
		

#the fast way
def fastfib(n):
	return ((1+math.sqrt(5))**n-(1-math.sqrt(5))**n)/(2**n*math.sqrt(5))

#Just by trial and error I found that the F^33 is < 4 million, F^34 is > 4 million
#print(fastfib(33))
#print(fastfib(34))

total = 0
for x in range(0,34):
	#I have to round the fast way to truncate the decimal 
	fibber = round(fastfib(x),0)
	if fibber%2==0:
		print('even')
		print(fibber)
		total += fibber
	else:
		print('odd')
		
print(total)
